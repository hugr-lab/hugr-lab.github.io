"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[3132],{2689:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>t,metadata:()=>s,toc:()=>o});const s=JSON.parse('{"id":"overview","title":"Overview","description":"Introduction","source":"@site/docs/1-overview.md","sourceDirName":".","slug":"/overview","permalink":"/docs/overview","draft":false,"unlisted":false,"editUrl":"https://github.com/hugr-lab/site/docs/1-overview.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"docsSidebar","next":{"title":"Key concepts","permalink":"/docs/concept"}}');var r=i(4848),a=i(8453);const t={sidebar_position:1},l="Overview",c={},o=[{value:"Introduction",id:"introduction",level:2},{value:"What is hugr?",id:"what-is-hugr",level:3},{value:"Project Status",id:"project-status",level:3},{value:"Key Features",id:"key-features",level:2},{value:"1. Unified GraphQL API",id:"1-unified-graphql-api",level:3},{value:"2. Independent and Declarative Schema Management",id:"2-independent-and-declarative-schema-management",level:3},{value:"3. Supported Data Sources",id:"3-supported-data-sources",level:3},{value:"4. Analytics and Geospatial Support",id:"4-analytics-and-geospatial-support",level:3},{value:"5. Advanced Features",id:"5-advanced-features",level:3},{value:"Usage Overview",id:"usage-overview",level:2},{value:"Data Access Backend for Applications",id:"data-access-backend-for-applications",level:3},{value:"Embedded Query Engine",id:"embedded-query-engine",level:3},{value:"Data Mesh Platforms",id:"data-mesh-platforms",level:3},{value:"Analytics &amp; MLOps Integration",id:"analytics--mlops-integration",level:3},{value:"Architecture",id:"architecture",level:2},{value:"DuckDB Analytical Engine",id:"duckdb-analytical-engine",level:3},{value:"Core DB",id:"core-db",level:3},{value:"Go Core Engine",id:"go-core-engine",level:3},{value:"Hugr server",id:"hugr-server",level:3},{value:"Hugr cluster management",id:"hugr-cluster-management",level:3},{value:"Schema &amp; Access Separation",id:"schema--access-separation",level:3},{value:"Hugr multipart IPC Protocol",id:"hugr-multipart-ipc-protocol",level:3},{value:"1.5. Scalability &amp; Clustering",id:"15-scalability--clustering",level:2},{value:"Multi-Node Operation",id:"multi-node-operation",level:3},{value:"Horizontal Scaling",id:"horizontal-scaling",level:3},{value:"Caching Strategy",id:"caching-strategy",level:3}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"overview",children:"Overview"})}),"\n",(0,r.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,r.jsxs)(n.p,{children:["Let's discover ",(0,r.jsx)(n.strong,{children:"hugr"})," in less than 5 minutes."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"hugr"})," is an ",(0,r.jsx)(n.strong,{children:"Open Source Data Mesh platform"})," and high-performance ",(0,r.jsx)(n.strong,{children:"GraphQL backend"})," designed for accessing ",(0,r.jsx)(n.strong,{children:"distributed data sources"}),", analytics, geospatial processing, and ",(0,r.jsx)(n.strong,{children:"rapid backend development"})," for applications and BI tools. The platform offers a ",(0,r.jsx)(n.strong,{children:"unified GraphQL API"})," across diverse sources and focuses on scalable, modular big data processing."]}),"\n",(0,r.jsx)(n.h3,{id:"what-is-hugr",children:"What is hugr?"}),"\n",(0,r.jsx)(n.p,{children:"hugr combines the power of modern data architecture patterns with the flexibility of GraphQL to create a comprehensive solution for:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Data Mesh Architecture"}),": Enabling decentralized data ownership while maintaining unified access"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Rapid API Development"}),": Quickly creating GraphQL APIs over existing data sources"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Analytics & BI"}),": Optimized for OLAP workloads and large-scale analytical queries"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Geospatial Processing"}),": Native support for spatial data types and operations"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Application Backends"}),": Serving as a universal data access layer for applications"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"project-status",children:"Project Status"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"License"}),": MIT"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Open Source"}),": Free for commercial and non-commercial use"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Repository"}),": ",(0,r.jsx)(n.a,{href:"https://github.com/hugr-lab/hugr",children:"hugr-lab/hugr"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Core Engine"}),": ",(0,r.jsx)(n.a,{href:"https://github.com/hugr-lab/query-engine",children:"hugr-lab/query-engine"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Docker Images"}),": ",(0,r.jsx)(n.a,{href:"https://github.com/r/hugr-lab/docker",children:"hugr-lab/docker"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Documentation"}),": ",(0,r.jsx)(n.a,{href:"https://hugr-lab.github.io/docs/",children:"docs"})]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"key-features",children:"Key Features"}),"\n",(0,r.jsx)(n.h3,{id:"1-unified-graphql-api",children:"1. Unified GraphQL API"}),"\n",(0,r.jsx)(n.p,{children:"hugr provides rapid creation of GraphQL APIs over multiple data sources, similar to data mapping systems. It supports:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"CRUD operations with full transaction support"}),"\n",(0,r.jsx)(n.li,{children:"Complex aggregations, joins, and filtering"}),"\n",(0,r.jsx)(n.li,{children:"Cross-source queries and relationships"}),"\n",(0,r.jsx)(n.li,{children:"Real-time data access for applications and BI tools"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"2-independent-and-declarative-schema-management",children:"2. Independent and Declarative Schema Management"}),"\n",(0,r.jsx)(n.p,{children:"Schemas are defined using GraphQL SDL with extended directives, offering:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Modular Design"}),": Schema modules can be reused across different sources"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Relationship Support"}),": Define joins, aggregations, and filtering declaratively"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Accessibility"}),": Data engineers can work without deep GraphQL specialization"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Hierarchical Organization"}),": Logical API structure through directive-based modules"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"3-supported-data-sources",children:"3. Supported Data Sources"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Relational Databases"}),", native connectors:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"DuckDB - used as the core query engine and supports attaching DuckDB databases as sources,"}),"\n",(0,r.jsx)(n.li,{children:"PostgreSQL (with PostGIS, TimescaleDB). Hugr supports filters, sorting, limits, aggregations and in source joins pushing down to the PostgreSQL databases."}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Files"}),":"]}),"\n",(0,r.jsx)(n.p,{children:"Through DuckDB hugr provides access to various file formats and storage systems:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Parquet, Apache Iceberg, Delta Lake, CSV, JSON"}),"\n",(0,r.jsx)(n.li,{children:"Hive-style partitioning"}),"\n",(0,r.jsx)(n.li,{children:"Stored locally or in cloud object storage (S3-compatible)"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Services"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"REST APIs (HTTP). Supports outbound requests authentication with OpenAPI flows: http Basic, ApiKey (in headers or parameters), OAuth2 (client credentials, password)."}),"\n",(0,r.jsx)(n.li,{children:"Arrow Flight (in development)"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Planned"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"MySQL (through DuckDB with out joins pushing down)"}),"\n",(0,r.jsx)(n.li,{children:"SQLite (through DuckDB with out joins pushing down)"}),"\n",(0,r.jsx)(n.li,{children:"ClickHouse"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"4-analytics-and-geospatial-support",children:"4. Analytics and Geospatial Support"}),"\n",(0,r.jsx)(n.p,{children:"hugr is optimized for analytical workloads:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"OLAP Operations"}),": Key-based aggregation, including referenced and joined data"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Spatial Analytics"}),": Native spatial types and cross-source spatial joins and aggregations"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Large Dataset Processing"}),": Efficient handling of big data through DuckDB"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Arrow IPC"}),": Custom protocol for efficient data transfer and put it into Python environments"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"5-advanced-features",children:"5. Advanced Features"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Result Transformation"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Server-side jq transformations"}),"\n",(0,r.jsx)(n.li,{children:"Customize JSON output formats per client requirements"}),"\n",(0,r.jsx)(n.li,{children:"Aggregate, flatten, or nest results as needed"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Security & Access Control"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"OAuth2 and OpenID Connect integration"}),"\n",(0,r.jsx)(n.li,{children:"Field-level and row-level security"}),"\n",(0,r.jsx)(n.li,{children:"Role-based permissions with predefined filters"}),"\n",(0,r.jsx)(n.li,{children:"Mutation auto-fill for user/role context"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Performance & Scalability"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Two-level caching (in-memory and external via Redis/Memcached)"}),"\n",(0,r.jsx)(n.li,{children:"Cluster mode with load balancing"}),"\n",(0,r.jsx)(n.li,{children:"Horizontal scaling capabilities"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"usage-overview",children:"Usage Overview"}),"\n",(0,r.jsx)(n.p,{children:"hugr serves multiple use cases across different domains:"}),"\n",(0,r.jsx)(n.h3,{id:"data-access-backend-for-applications",children:"Data Access Backend for Applications"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Universal GraphQL layer over existing data sources"}),"\n",(0,r.jsx)(n.li,{children:"Centralized schema and access control management"}),"\n",(0,r.jsx)(n.li,{children:"Minimal integration effort for data-first applications"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"embedded-query-engine",children:"Embedded Query Engine"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Reusable Go package for custom services"}),"\n",(0,r.jsx)(n.li,{children:"Query compiler and execution engine"}),"\n",(0,r.jsx)(n.li,{children:"Integration of custom Go functions as data sources"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"data-mesh-platforms",children:"Data Mesh Platforms"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Federated access through a single API"}),"\n",(0,r.jsx)(n.li,{children:"Decentralized data ownership model"}),"\n",(0,r.jsx)(n.li,{children:"Domain-specific modeling and scaling"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"analytics--mlops-integration",children:"Analytics & MLOps Integration"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"OLAP and spatial analytics support"}),"\n",(0,r.jsx)(n.li,{children:"Export to Arrow IPC and Python (Pandas/GeoDataFrame)"}),"\n",(0,r.jsx)(n.li,{children:"ETL/ELT and ML pipeline result integration"}),"\n",(0,r.jsx)(n.li,{children:"Continuous data lifecycle: Ingestion \u2192 Processing \u2192 ML \u2192 API Access"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"architecture",children:"Architecture"}),"\n",(0,r.jsx)(n.p,{children:"hugr's architecture is built around several core components:"}),"\n",(0,r.jsx)(n.h3,{id:"duckdb-analytical-engine",children:"DuckDB Analytical Engine"}),"\n",(0,r.jsxs)(n.p,{children:["hugr uses ",(0,r.jsx)(n.a,{href:"https://duckdb.org/",children:"DuckDB"})," as its primary analytical engine, providing:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"High Performance"}),": Optimized for analytical queries"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Format Flexibility"}),": Support for multiple data formats and sources"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"In-Process Execution"}),": Efficient memory usage and processing"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Go Integration"}),": Seamless integration via ",(0,r.jsx)(n.a,{href:"https://github.com/marcboeker/go-duckdb",children:"go-duckdb"})]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"core-db",children:"Core DB"}),"\n",(0,r.jsx)(n.p,{children:"The core database that is used by query engine to store and retrieve:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Catalog sources"}),": Source of catalog files logical grouped by data source type and domains"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Data sources"}),": Registered data sources with their connection parameters and Catalogs"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Roles"}),": User roles with permissions (access control policies)"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"The core database can be DuckDB (file or memory) or PostgreSQL, depending on the deployment configuration. It is used to store metadata about data sources, schemas, and access control policies."}),"\n",(0,r.jsx)(n.p,{children:"CoreDB can be configured as read-only - it defines by configuration parameters or always for a DuckDB file, that is stored in the S3 bucket."}),"\n",(0,r.jsx)(n.h3,{id:"go-core-engine",children:"Go Core Engine"}),"\n",(0,r.jsxs)(n.p,{children:["The core logic is implemented in the open-source Go package ",(0,r.jsx)(n.a,{href:"https://github.com/hugr-lab/query-engine",children:"hugr-lab/query-engine"}),", handling:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Data source management and abstraction"}),"\n",(0,r.jsx)(n.li,{children:"GraphQL schema compilation and validation"}),"\n",(0,r.jsx)(n.li,{children:"Query transformation from GraphQL to source-specific operations"}),"\n",(0,r.jsx)(n.li,{children:"Caching layer management"}),"\n",(0,r.jsx)(n.li,{children:"Access control enforcement"}),"\n",(0,r.jsxs)(n.li,{children:["HTTP GraphQL request processing via ",(0,r.jsx)(n.code,{children:"http.Handler"})," interface"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"hugr-server",children:"Hugr server"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"server"})," server is a lightweight HTTP server, written in Go, that:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Serves the GraphQL API"}),"\n",(0,r.jsx)(n.li,{children:"Handles schema management and introspection"}),"\n",(0,r.jsx)(n.li,{children:"Manages data source connections"}),"\n",(0,r.jsx)(n.li,{children:"Provides a web interface for schema exploration and query testing (GraphiQL)"}),"\n",(0,r.jsx)(n.li,{children:"Supports configuration via environment variables"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"https://github.com/hugr-lab/hugr/cmd/server",children:"hugr-lab/hugr"})," repository contains the server implementation, which can be run as a standalone binary or as a Docker container."]}),"\n",(0,r.jsx)(n.h3,{id:"hugr-cluster-management",children:"Hugr cluster management"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"management"})," component manages multi-node deployments, providing:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Cluster Coordination"}),": Synchronization of attached data sources and S3 storage access configuration"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Node health monitoring"}),": Monitoring and management of cluster nodes"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Core DB migration"}),": Core database schema migrations for cluster-wide consistency"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"https://github.com/hugr-lab/hugr/cmd/management",children:"hugr-lab/hugr"})," repository contains the management node implementation, which can be run as a standalone binary or as a Docker container."]}),"\n",(0,r.jsx)(n.h3,{id:"schema--access-separation",children:"Schema & Access Separation"}),"\n",(0,r.jsx)(n.p,{children:"hugr maintains clean separation between:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Data Schema Logic"}),": Defined in GraphQL SDL with custom directives"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Access Control Policies"}),": Role-based permissions, visibility rules, and security filters"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"This separation enables flexible security models without coupling data structure to access patterns."}),"\n",(0,r.jsx)(n.h3,{id:"hugr-multipart-ipc-protocol",children:"Hugr multipart IPC Protocol"}),"\n",(0,r.jsx)(n.p,{children:"hugr implements a custom HTTP Multipart IPC protocol for efficient data transfer between the server and clients, particularly for large datasets. Key features include:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Efficient streaming of large datasets"}),"\n",(0,r.jsxs)(n.li,{children:["Python-compatible output (",(0,r.jsx)(n.code,{children:"pandas.DataFrame"})," and ",(0,r.jsx)(n.code,{children:"GeoDataFrame"}),")"]}),"\n",(0,r.jsx)(n.li,{children:"Direct integration with analytics and ML pipelines"}),"\n",(0,r.jsxs)(n.li,{children:["Specification available at: ",(0,r.jsx)(n.a,{href:"https://github.com/hugr-lab/query-engine/blob/main/hugr-ipc.md",children:"hugr-ipc.md"})]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["The Python client library ",(0,r.jsx)(n.code,{children:"hugr-client"})," provides a convenient interface for working with the Arrow IPC protocol, allowing users to easily query data and process results in Python environments.\n",(0,r.jsx)(n.a,{href:"https://github.com/hugr-lab/hugr-client",children:"hugr-lab/docker"})," repository contains the client implementation, which can be installed via pip."]}),"\n",(0,r.jsx)(n.h2,{id:"15-scalability--clustering",children:"1.5. Scalability & Clustering"}),"\n",(0,r.jsx)(n.p,{children:"hugr is designed for enterprise-scale deployments:"}),"\n",(0,r.jsx)(n.h3,{id:"multi-node-operation",children:"Multi-Node Operation"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Source Synchronization"}),": Consistent data access across cluster nodes"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Load Balancing"}),": Distribute query load across multiple instances"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Fault Tolerance"}),": Resilient to individual node failures"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"horizontal-scaling",children:"Horizontal Scaling"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Stateless Design"}),": Nodes can be added or removed dynamically"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Shared Configuration"}),": Centralized schema and access control management"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Performance Optimization"}),": Caching and query optimization across the cluster"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"caching-strategy",children:"Caching Strategy"}),"\n",(0,r.jsx)(n.p,{children:"Two-level caching architecture:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"In-Memory Cache"}),": Fast access to frequently requested data"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"External Cache"}),": Redis or Memcached for shared cache across cluster nodes"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"https://github.com/hugr-lab/docker",children:"hugr-lab/docker"})," contains Docker images for both the ",(0,r.jsx)(n.code,{children:"server"})," server and ",(0,r.jsx)(n.code,{children:"management"})," management components, allowing easy deployment in containerized environments.\nIt also provides ",(0,r.jsx)(n.strong,{children:"k8s chart templates"})," to deploy hugr in Kubernetes clusters, including support for multi-node setups with load balancing and caching."]}),"\n",(0,r.jsx)(n.p,{children:"This comprehensive architecture makes hugr suitable for both small-scale applications and large enterprise data platforms, providing the flexibility to grow with your data needs while maintaining high performance and reliability."})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>t,x:()=>l});var s=i(6540);const r={},a=s.createContext(r);function t(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);